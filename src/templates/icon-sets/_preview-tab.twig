{# Icon Preview Tab Content #}

<div style="margin-bottom: 24px;">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h2 style="margin: 0 0 8px 0;">{{ "Icon Preview"|t('icon-manager') }}</h2>
            <p class="light" style="margin: 0;">{{ "Browse all icons in this set"|t('icon-manager') }}</p>
        </div>
        <div>
            <label for="icon-size-select" style="margin-right: 8px; font-weight: 600;">{{ "Size:"|t('icon-manager') }}</label>
            <select id="icon-size-select" class="select" style="width: auto;">
                <option value="small">{{ "Small (32px)"|t('icon-manager') }}</option>
                <option value="medium" selected>{{ "Medium (64px)"|t('icon-manager') }}</option>
                <option value="large">{{ "Large (86px)"|t('icon-manager') }}</option>
                <option value="xl">{{ "XL (128px)"|t('icon-manager') }}</option>
            </select>
        </div>
    </div>
</div>

{% if icons|length > 0 %}
    <div class="pane" style="padding: 24px;">
        <div id="icon-preview-grid" class="icon-preview-grid" data-grid-size="medium" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 16px;">
            {% for icon in icons %}
                <div class="icon-preview-item" style="display: flex; flex-direction: column; align-items: center; padding: 16px; border: 1px solid #e5e7eb; border-radius: 8px; background: #fff; transition: all 0.2s;">
                    <div class="icon-preview-container" data-size="medium" style="width: 64px; height: 64px; display: flex; align-items: center; justify-content: center; color: #374151; margin-bottom: 12px; font-size: 64px;">
                        {{ icon.render({width: 64, height: 64}) }}
                    </div>
                    <div style="text-align: center; font-size: 11px; color: #6b7280; word-break: break-word; line-height: 1.3;">
                        {{ icon.name }}
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% else %}
    <div class="pane" style="padding: 60px; text-align: center;">
        <p style="font-size: 16px; font-weight: 600; margin: 0 0 8px 0; color: #6b7280;">{{ "No Icons Found"|t('icon-manager') }}</p>
        <p class="light">{{ "This icon set doesn't contain any icons yet."|t('icon-manager') }}</p>
    </div>
{% endif %}

{% js %}
// Handle icon size changes
$('#icon-size-select').on('change', function() {
    const size = $(this).val();
    const containers = $('.icon-preview-container');
    const grid = $('#icon-preview-grid');

    // Update grid column size based on icon size
    let minColWidth;
    if (size === 'small') {
        minColWidth = '100px';
    } else if (size === 'large') {
        minColWidth = '160px';
    } else if (size === 'xl') {
        minColWidth = '200px';
    } else {
        minColWidth = '140px';
    }
    grid.css('grid-template-columns', `repeat(auto-fill, minmax(${minColWidth}, 1fr))`);
    grid.attr('data-grid-size', size);

    containers.each(function() {
        const $container = $(this);
        $container.attr('data-size', size);

        // Update container size
        if (size === 'small') {
            $container.css({ width: '32px', height: '32px' });
        } else if (size === 'large') {
            $container.css({ width: '86px', height: '86px' });
        } else if (size === 'xl') {
            $container.css({ width: '128px', height: '128px' });
        } else {
            $container.css({ width: '64px', height: '64px' });
        }

        // Update SVG size
        $container.find('svg').each(function() {
            if (size === 'small') {
                $(this).attr({ width: 32, height: 32 });
            } else if (size === 'large') {
                $(this).attr({ width: 86, height: 86 });
            } else if (size === 'xl') {
                $(this).attr({ width: 128, height: 128 });
            } else {
                $(this).attr({ width: 64, height: 64 });
            }
        });

        // Update font-based icons (Material Icons, Font Awesome, Web Fonts)
        $container.find('i, span.icon').each(function() {
            let fontSize;
            if (size === 'small') {
                fontSize = '32px';
            } else if (size === 'large') {
                fontSize = '86px';
            } else if (size === 'xl') {
                fontSize = '128px';
            } else {
                fontSize = '64px';
            }
            $(this).css('font-size', fontSize);
        });
    });
});

// Add hover effect
$('.icon-preview-item').hover(
    function() {
        $(this).css({
            'border-color': '#0ea5e9',
            'box-shadow': '0 2px 8px rgba(14, 165, 233, 0.2)',
            'transform': 'translateY(-2px)'
        });
    },
    function() {
        $(this).css({
            'border-color': '#e5e7eb',
            'box-shadow': 'none',
            'transform': 'translateY(0)'
        });
    }
);
{% endjs %}
